name: Build and test app

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    name: Build and Test app
    runs-on: macos-latest

    steps:
      - name: Check Xcode version
        run: |
          /usr/bin/xcodebuild -version
          swift -version
      - name: Checkout
        uses: actions/checkout@v3
#      - name: Change Xcode
#        run: |
#          ls /Applications
#          sudo xcode-select -p
#          sudo xcode-select -s /Applications/Xcode_14.1.app
#          sudo xcode-select -p
      - name: Prepare iOS 16 simulator
        run: |
          sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes
          /Applications/Xcode_14.2.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 16.2.simruntime
          xcrun simctl list runtimes
          xcrun simctl create custom-test-device "iPhone 11" "com.apple.CoreSimulator.SimRuntime.iOS-16-2"
          xcrun simctl list devices 16.2
#      - name: Set default scheme
#        run: |
#          scheme_list=$(xcodebuild -list -json -verbose | tr -d "\n")
#          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
#          echo $default | cat >default
#          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'TestsExample' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "simulator saved: ${device}"
          echo "scheme saved: ${scheme}"
          echo "file parameter: ${filetype_parameter}"
          echo "file to build: ${file_to_build}"
          xcodebuild -"$filetype_parameter" "$file_to_build" -scheme "$scheme" -sdk iphonesimulator -destination "platform=$platform,name=$device" -showdestinations clean build
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
